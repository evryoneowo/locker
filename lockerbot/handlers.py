from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from . import db, crypto, keyboards

router = Router()

@router.message(Command('help'))
async def helpcmd(msg: Message):
    await msg.answer('''<b>üìÉ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>

/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/master [pass] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å, gen –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
/newmaster [newpass] [oldpass] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å, gen –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
/add [service] [login] [pass] [masterpass] - –¥–æ–±–∞–≤–∏—Ç—å / –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, gen –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
/get [service] [masterpass] - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å
/services - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
/del [service] [masterpass] - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
/deletemyaccount [masterpass] - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/togglecrypto - –≤–∫–ª/–≤—ã–∫–ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∞–Ω–Ω—ã—Ö''')

@router.message(Command('start'))
async def startcmd(msg: Message):
    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id).first()

    txt = '''<b>üîê Locker</b>

–£–¥–æ–±–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π. –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ <b>–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è</b> –∑–∞—â–∏—Ç–∞, –∞ —Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π <b>–∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</b>!
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'''

    if not user:
        txt += '\n\n–ù–∞–ø–∏—à–∏ /master [pass] —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å.'
    
    await msg.answer(txt,
                     reply_markup=keyboards.source.as_markup())

@router.message(Command('master'))
async def mastercmd(msg: Message):
    await msg.delete()

    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id).first()

    if user:
        await msg.answer('‚ùóÔ∏è <b>–£ —Ç–µ–±—è —É–∂–µ —Å—Ç–æ–∏—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!</b>')
        return
    
    if len(msg.text.split()) != 2:
        await msg.answer('‚ùóÔ∏è <b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:</b> /master [pass]')
        return

    password = msg.text.split()[1]
    
    if password == 'gen':
        password = crypto.gen_password()

        await msg.answer(f'‚ÑπÔ∏è <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:</b>\n<code>{password}</code>\n\n–°–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ!',
                         reply_markup=keyboards.read.as_markup())

    hashed, salt = crypto.hash_password(password)

    user = db.User(
        user_id = msg.from_user.id,
        togglecrypto = True,
        password_hash = hashed,
        salt = salt
    )

    db.session.add(user)
    db.session.commit()

    await msg.answer(f'‚úÖ <b>–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–•–µ—à: <code>{hashed}</code>\n–°–æ–ª—å: <code>{crypto.bytestostr(salt)}</code>\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /add [service] [login] [pass] [masterpass]')

@router.message(Command('newmaster'))
async def newmastercmd(msg: Message):
    await msg.delete()

    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id).first()

    if not user:
        await msg.answer('‚ùóÔ∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä –ø–∞—Ä–æ–ª—è!</b>')
        return
    
    if len(msg.text.split()) != 3:
        await msg.answer('‚ùóÔ∏è <b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:</b> /newmaster [newpass] [oldpass]')
        return
    
    password, master = msg.text.split()[1:]

    if not crypto.check_password(master, user.salt, user.password_hash):
        await msg.answer('‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!</b>')
        return
    
    if password == 'gen':
        password = crypto.gen_password()

        await msg.answer(f'‚ÑπÔ∏è <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å:</b>\n<code>{password}</code>\n\n–°–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ!',
                         reply_markup=keyboards.read.as_markup())
    
    hashed, salt = crypto.hash_password(password)

    user.password_hash, user.salt = hashed, salt

    for passw in db.session.query(db.Password).filter(db.Password.user_id == msg.from_user.id):
        decrypted = crypto.decrypt_password(master, passw.salt, passw.password_enc, passw.nonce)
        
        encrypted, salt, nonce = crypto.encrypt_password(password, decrypted)

        passw.password_enc = encrypted
        passw.salt = salt
        passw.nonce = nonce
    
    db.session.commit()

    txt = f'‚úÖ <b>–ú–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω, –ø–∞—Ä–æ–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã</b>'
    
    if user.togglecrypto:
        txt += f'\n\n–•–µ—à: <code>{hashed}</code>\n–°–æ–ª—å: <code>{crypto.bytestostr(salt)}</code>'

    await msg.answer(txt)

@router.message(Command('add'))
async def addcmd(msg: Message):
    await msg.delete()

    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id).first()

    if not user:
        await msg.answer('‚ùóÔ∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è!</b> –ò—Å–ø–æ–ª—å–∑—É–π /master [pass]')
        return
    
    if len(msg.text.split()) != 5:
        await msg.answer('‚ùóÔ∏è <b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:</b> /add [service] [login] [pass] [masterpass]')
        return

    service, login, password, master = msg.text.split()[1:]

    if not crypto.check_password(master, user.salt, user.password_hash):
        await msg.answer('‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!</b>')
        return
    
    if password == 'gen':
        password = crypto.gen_password()

        await msg.answer(f'‚ÑπÔ∏è <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b>\n<code>{password}</code>',
                         reply_markup=keyboards.read.as_markup())

    passw = db.session.query(db.Password).filter(db.Password.user_id == msg.from_user.id, db.Password.service == service).first()

    encrypted, salt, nonce = crypto.encrypt_password(master, password)

    if passw:
        passw.login = login
        passw.password_enc = encrypted
        passw.salt = salt
        passw.nonce = nonce
    else:
        new_password = db.Password(
            user_id=user.user_id,
            service=service,
            login=login,
            password_enc=encrypted,
            salt=salt,
            nonce=nonce
        )

        db.session.add(new_password)
    db.session.commit()

    action = '–∏–∑–º–µ–Ω–µ–Ω' if passw else '–¥–æ–±–∞–≤–ª–µ–Ω'

    txt = f'‚úÖ <b>–°–µ—Ä–≤–∏—Å {service} {action}!</b>'

    if user.togglecrypto:
        txt += f'\n\n–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: <code>{crypto.bytestostr(encrypted)}</code>\n–°–æ–ª—å: <code>{crypto.bytestostr(salt)}</code>\nNonce: <code>{crypto.bytestostr(nonce)}</code>'

    await msg.answer(txt)

@router.message(Command('get'))
async def getcmd(msg: Message):
    await msg.delete()

    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id).first()

    if not user:
        await msg.answer('‚ùóÔ∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è!</b> –ò—Å–ø–æ–ª—å–∑—É–π /master [pass]')
        return
    
    if len(msg.text.split()) != 3:
        await msg.answer('‚ùóÔ∏è <b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:</b> /get [service] [masterpass]')
        return

    service, master = msg.text.split()[1:]

    if not crypto.check_password(master, user.salt, user.password_hash):
        await msg.answer('‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!</b>')
        return
    
    password = db.session.query(db.Password).filter(db.Password.user_id == msg.from_user.id, db.Password.service == service).first()

    if not password:
        await msg.answer('‚ùóÔ∏è <b>–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è!</b> –ò—Å–ø–æ–ª—å–∑—É–π /add [service] [login] [pass] [masterpass] —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.')
        return
    
    decrypted = crypto.decrypt_password(master, password.salt, password.password_enc, password.nonce)

    await msg.answer(f'<b>{service}</b>\n\n–õ–æ–≥–∏–Ω: <code>{password.login}</code>\n–ü–∞—Ä–æ–ª—å: <code>{decrypted}</code>',
                     reply_markup=keyboards.read.as_markup())

@router.message(Command('services'))
async def servicescmd(msg: Message):
    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id).first()

    if not user:
        await msg.answer('‚ùóÔ∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è!</b> –ò—Å–ø–æ–ª—å–∑—É–π /master [pass]')
        return
    
    txt = '<b>–°–µ—Ä–≤–∏—Å—ã:</b>\n\n'
    for i in user.passwords:
        txt += f'<code>{i.service}</code>\n'
    
    await msg.answer(txt)

@router.message(Command('del'))
async def delcmd(msg: Message):
    await msg.delete()

    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id).first()

    if not user:
        await msg.answer('‚ùóÔ∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è!</b> –ò—Å–ø–æ–ª—å–∑—É–π /master [pass]')
        return
    
    if len(msg.text.split()) != 3:
        await msg.answer('‚ùóÔ∏è <b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:</b> /del [service] [masterpass]')
        return

    service, master = msg.text.split()[1:]

    if not crypto.check_password(master, user.salt, user.password_hash):
        await msg.answer('‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!</b>')
        return
    
    passwords = db.session.query(db.Password).filter(db.Password.user_id == msg.from_user.id, db.Password.service == service)

    if not passwords:
        await msg.answer('‚ùóÔ∏è <b>–ù–µ—Ç —Ç–∞–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π!</b>')
        return
    
    passwords.delete()
    db.session.commit()

    await msg.answer('‚úÖ <b>–ó–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>')

@router.message(Command('deletemyaccount'))
async def deletemyaccountcmd(msg: Message):
    await msg.delete()

    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id)

    if not user.first():
        await msg.answer('‚ùóÔ∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!</b> –ò—Å–ø–æ–ª—å–∑—É–π /master [pass]')
        return
    
    if len(msg.text.split()) != 2:
        await msg.answer('‚ùóÔ∏è <b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã:</b> /deletemyaccount [masterpass]')
        return

    master = msg.text.split()[1]

    if not crypto.check_password(master, user.first().salt, user.first().password_hash):
        await msg.answer('‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å!</b>')
        return

    db.session.query(db.Password).filter(db.Password.user_id == msg.from_user.id).delete()
    user.delete()
    
    db.session.commit()

    await msg.answer('‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>')

@router.message(Command('togglecrypto'))
async def togglecryptocmd(msg: Message):
    user = db.session.query(db.User).filter(db.User.user_id == msg.from_user.id).first()

    if not user:
        await msg.answer('‚ùóÔ∏è <b>–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!</b> –ò—Å–ø–æ–ª—å–∑—É–π /master [pass]')
        return
    
    state = not user.togglecrypto
    user.togglecrypto = state

    db.session.commit()

    await msg.answer(f'‚ÑπÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: <b>{"–≤–∫–ª" if state else "–≤—ã–∫–ª"}</b>')

@router.callback_query()
async def on_cq(cq: CallbackQuery):
    if cq.data == 'read':
        await cq.message.delete()
